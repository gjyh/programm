#1.没有string类型。
##原因：
C语言不是面向对象语言，没有类和方法的概念，也没有操作符重载。
定义string类型，如果不改变构成（存储）方式，还需要定义很多类似函数。如果改变构成方式，类似str[n]的用法就没有了，以及数据的拷贝和子串的访问不可以通过指针实现。
<如加法的重载，在C++中，“+”是可以被重载的，例如，如果两个数字相加，给出两个数字的和，如果是字符串+字符串，输出两个字符串相连的结果。
##用字符数组实现。 
char *s="";
char ss[]="";
char ss[]={'','',''};
注意：声明存储字符串的数组时，数组大小至少比所存储的字符串多1，因为编译器会自动在字符串常量的末尾添加空字符\0

#2.暧昧不清的指针与数组
数组是可以存储一个固定大小的相同类型元素的顺序集合。
'''
int a[5];
char b[] = "hello";
'''
*取内容 &取地址
数组下标运算实际上都是通过指针进行的，也就是说a[4]与*(a+4)是等价的。甚至等价于4[a]。
数组名一般代表了指向该数组下标为0的元素的指针。例外：&数组名返回一个指向数组的指针，sizeof(数组名)返回整个数组的大小。
int e[4];//假设int为4字节（实际为2~4个字节视编译器不同）
sizeof(e); //结果为4*4=16
length=sizeof(data)/sizeof(data[0]); //求数组长度
但通过传递数组名参数到子函数中，以获得数组长度是不可行的。  
int getLength(int[] a){int length;length=sizeof(a)/sizeof(a[0]); //这样是错误的，得到的结果永远是1return length;}因为，a是函数参数，到了本函数中，a只是一个指针。
//求未满数组长度，‘\0’ int数组也可以，for(i=0;a[i]!='\0';++i);
char *s="hello";
printf("%s",s);
~~printf("%s",*s);~~ //错误！

#3.